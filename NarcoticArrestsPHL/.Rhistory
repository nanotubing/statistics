plot(roads.tmp, col = shades[index], lwd = 3)
# 3. using an attribute to specify the line width
plot(roads.tmp, lwd = roads.tmp$LENGTH_MI * 10)
# reset par(mfrow)
par(mfrow=c(1,1))
data(meuse.grid)
class(meuse.grid)
summary(meuse.grid)
plot(meuse.grid$x, meuse.grid$y, asp = 1)
meuse.grid = SpatialPixelsDataFrame(points =
meuse.grid[c("x", "y")], data = meuse.grid)
par(mfrow=c(1,2)) # set plot order
par(mar = c(0.25, 0.25, 0.25, 0.25)) # set margins
# map the dist attribute using the image function
image(meuse.grid, "dist", col = rainbow(7))
image(meuse.grid, "dist", col = heat.colors(7))
# using spplot from the sp package
par(mar = c(0.25, 0.25, 0.25, 0.25)) # set margins
p1 <- spplot(meuse.grid, "dist", col.regions=terrain.colors(20))
# position in c(xmin, ymin, xmax, ymax)
print(p1, position = c(0,0,0.5,0.5), more = T)
View(meuse.grid)
View(meuse.grid)
p2 <- spplot(meuse.grid, c("part.a", "part.b", "soil", "ffreq"),
col.regions=topo.colors(20))
print(p2, position = c(0.5,0,1,0.5), more = T)
data(newhaven)
hist(blocks$P_VACANT)
summary(blocks$P_VACANT)
fivenum(blocks$P_VACANT)
?fivenum
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
par(mfrow=c(1,1))
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
par(mar = c(5,2,2,5))
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
par(mar = c(5,3,1,5))
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
index <- blocks$P_VACANT > 10
high.vac <- blocks[index,]
low.vac <- blocks[!index,]
cols = rev(brewer.pal(3, "Blues"))
par(mfrow = c(1,2))
par(mar = c(2.5,2,3,1))
# attach the data frame
attach(data.frame(high.vac))
# create a boxplot of 3 variables
boxplot(P_OWNEROCC,P_WHITE,P_BLACK,
names=c("OwnerOcc", "White", "Black"),
col=cols, cex.axis = 0.7, main = "High Vacancy")
# detach the data frame
detach(data.frame(high.vac))
# attach the data frame
attach(data.frame(high.vac))
# detach the data frame
detach(data.frame(high.vac))
# do the same for the second boxplot & variables
attach(data.frame(low.vac))
boxplot(P_OWNEROCC,P_WHITE,P_BLACK,
names=c("OwnerOcc","White", "Black"),
col=cols, cex.axis = 0.7, main = "Low Vacancy")
detach(data.frame(low.vac))
# reset par(mfrow)
par(mfrow=c(1,1))
# reset the plot margins
par(mar=c(5,4,4,2))
plot(blocks$P_VACANT/100, blocks$P_WHITE/100)
plot(blocks$P_VACANT/100, blocks$P_BLACK/100)
p.vac <- blocks$P_VACANT/100
p.w <- blocks$P_WHITE/100
p.b <- blocks$P_BLACK/100
mod.1 <- lm(p.vac ~ p.w)
mod.2 <- lm(p.vac ~ p.b)
summary(mod.1)
summary(mod.2)
summary(lm(p.vac ~ p.w + p.b))
# define a factor for the jitter function
fac = 0.05
# define a colour palette
cols = (brewer.pal(6, "Spectral"))
?jitter
# plot the points with small random term added
# this is to help show densities
# 1st properties vacant against p.w
plot(jitter(p.vac, fac), jitter(p.w, fac),
xlab= "Proportion Vacant",
ylab = "Proprtion White / Black",
col = cols[1], xlim = c(0, 0.8))
# then properties vacant against p.b
points(jitter(p.vac, fac), jitter(p.b, fac), col = cols[6])
?abline
# fit some trend lines from the 2 regression model coefficients
abline(a = coef(mod.1)[1], b= coef(mod.1)[2],
lty = 1, col = cols[1]); #white
abline(a = coef(mod.2)[1], b= coef(mod.2)[2],
lty = 1, col = cols[6]); #black
# add some legend items
legend(0.71, 0.19, legend = "Black", bty = "n", cex = 0.8)
legend(0.71, 0.095, legend = "White", bty = "n", cex = 0.8)
?legend
# populations of each group in each census block
pops <- data.frame(blocks[,14:18]) * data.frame(blocks)[,11]
View(blocks)
pops <- as.matrix(pops/100)
View(pops)
colnames(pops) <- c("White", "Black", "Ameri", "Asian", "Other")
# a true / false for vacant properties
vac.10 <- (blocks$P_VACANT > 10) + 0
# the crosstabulations
mat.tab <- xtabs(pops ~vac.10)
# mosaic plot
ttext = sprintf("Mosaic Plot of Vacant Properties with ethnicty")
mosaicplot(t(mat.tab),xlab='',
ylab= 'Vacant Properties > 10 percent',
main=ttext,shade=TRUE,las=3,cex=0.8)
q
pops
head(pops)
head(vac.10)
head(mat.tab)
mat.tab
?mosaicplot
library(sos);findFn("choropleth")
## ----carsonvoro,cache=TRUE-----------------------------------------------
#
# Original code from Carson Farmer
# http://www.carsonfarmer.com/2009/09/voronoi-polygons-with-r/
# Subject to minor stylistic modifications
#
require(deldir)
require(sp)
voronoipolygons = function(layer) {
crds <- layer@coords
z <- deldir(crds[,1], crds[,2])
w <- tile.list(z)
polys <- vector(mode='list', length=length(w))
for (i in seq(along=polys)) {
pcrds <- cbind(w[[i]]$x, w[[i]]$y)
pcrds <- rbind(pcrds, pcrds[1,])
polys[[i]] <- Polygons(list(Polygon(pcrds)),
ID=as.character(i))
}
SP <- SpatialPolygons(polys)
voronoi <- SpatialPolygonsDataFrame(SP,
data=data.frame(x=crds[,1],
y=crds[,2],
layer@data,
row.names=sapply(slot(SP, 'polygons'),
function(x) slot(x, 'ID'))))
return(voronoi)
}
voronoipolygons()
## ----transects,fig.cap='Fulmar Sighting Transects (LHS=Points; RHS=Voronoi Diagram)',results='hide',cache=TRUE----
library(gstat)
library(maptools)
data(fulmar)
head(fulmar)
fulmar.spdf <- SpatialPointsDataFrame(cbind(fulmar$x,fulmar$y),
fulmar)
head(fulmar.spdf)
head(fulmar.spdf$data)
head(fulmar.spdf$coords)
fulmar.spdf <- fulmar.spdf[fulmar.spdf$year==1999,]
fulmar.voro <- voronoipolygons(fulmar.spdf)
par(mfrow=c(1,2),mar=c(0.1,0.1,0.1,0.1))
plot(fulmar.spdf,pch=16)
plot(fulmar.voro)
## ----nni,fig.cap='Nearest Neighbour Estimate of Fulmar Density',results='hide',cache=TRUE----
library(gstat)
library(GISTools)
sh <- shading(breaks=c(5,15,25,35),
cols=brewer.pal(5,'Purples'))
par(mar=c(0.1,0.1,0.1,0.1))
choropleth(fulmar.voro,fulmar.voro$fulmar,shading=sh,border=NA)
plot(fulmar.voro,border='lightgray',add=TRUE,lwd=0.5)
choro.legend(px='topright',sh=sh)
## ----setupIDW,results='hide',cache=FALSE---------------------------------
library(maptools) # Required package
library(GISTools) # Required package
library(gstat) # Set up the gstat package
# Define a sample grid then use it as a set of points
# to estimate fulmar density via IDW, with alpha=1
s.grid <- spsample(fulmar.voro,type='regular',n=6000)
idw.est <- gstat::idw(fulmar~1,fulmar.spdf,
newdata=s.grid,idp=1.0)
summary(idw.est)
head(idw.est)
## ----reshapeIDW,cache=FALSE----------------------------------------------
# Extract the distinct x and y coordinates of the grid
# Extract the predicted values and form into a matrix
# of gridded values
ux <- unique(coordinates(idw.est)[,1])
uy <- unique(coordinates(idw.est)[,2])
predmat <- matrix(idw.est$var1.pred,length(ux),length(uy))
head(idw.est$var1.pred)
## ----setupIDW2,results='hide',cache=FALSE--------------------------------
idw.est2 <- gstat::idw(fulmar~1,fulmar.spdf,
newdata=s.grid,idp=2.0)
predmat2 <- matrix(idw.est2$var1.pred,length(ux),length(uy))
par(mar=c(0.1,0.1,0.1,0.1),mfrow=c(1,2))
plot(fulmar.voro,border=NA,col=NA)
.filled.contour(ux,uy,predmat,col=brewer.pal(5,'Purples'),
levels=c(0,2,4,6,8,30))
.filled.contour(ux,uy,predmat,col=brewer.pal(5,'Purples'),
levels=c(0,2,4,6,8,30))
# Draw the legend
sh <- shading(breaks=c(2,4,6,8),
cols=brewer.pal(5,'Purples'))
choro.legend(px='topright',sh=sh,bg='white')
plot(fulmar.voro,border=NA,col=NA)
.filled.contour(ux,uy,predmat2,col=brewer.pal(5,'Purples'),
levels=c(0,2,4,6,8,30))
choro.legend(px='topright',sh=sh,bg='white')
## ----idw3dflaws,fig.cap="3D Plots of IDW (LHS:$\\alpha=1$; RHS:$\\alpha=2$)",cache=FALSE----
par(mfrow=c(1,2),mar=c(0,0,2,0))
persp(predmat,box=FALSE)
persp(predmat2,box=FALSE)
## ----krige,fig.cap='Kriging semivariogram',message=FALSE,results='hide',cache=FALSE----
evgm <- variogram(fulmar~1,fulmar.spdf,
boundaries=seq(0,250000,l=51))
fvgm <- fit.variogram(evgm,vgm(3,"Mat",100000,1))
head(evgm)
head(fvgm)
names(evgm)
names(fvgm)
plot(evgm,model=fvgm)
## ----krig2,fig.cap='Kriging estimates of fulmar density (RHS),  and associated variance (LHS)',message=FALSE,results='hide',cache=FALSE----
krig.est <- krige(fulmar~1,fulmar.spdf,newdata=s.grid,model=fvgm)
head(krig.est)
names(krig.est)
predmat3 <- matrix(krig.est$var1.pred,length(ux),length(uy))
par(mar=c(0.1,0.1,0.1,0.1),mfrow=c(1,2))
plot(fulmar.voro,border=NA,col=NA)
?pmax
.filled.contour(ux,uy,pmax(predmat3,0),col=brewer.pal(5,'Purples'),
levels=c(0,8,16,24,32,40))
.filled.contour(ux,uy,pmax(predmat3,0),col=brewer.pal(5,'Purples'),
levels=c(0,8,16,24,32,40))
sh <- shading(breaks=c(8,16,24,32),
cols=brewer.pal(5,'Purples'))
choro.legend(px='topright',sh=sh,bg='white')
errmat3 <- matrix(krig.est$var1.var,length(ux),length(uy))
plot(fulmar.voro,border=NA,col=NA)
.filled.contour(ux,uy,errmat3,col=rev(brewer.pal(5,'Purples')),
levels=c(0,3,6,9,12,15))
sh <- shading(breaks=c(3,6,9,12),
cols=rev(brewer.pal(5,'Purples')))
choro.legend(px='topright',sh=sh,bg='white')
## ----onk,fig.cap="3D Plot Kriging-based interpolation.",cache=FALSE------
persp(predmat3,box=FALSE)
rm(list = ls())
setwd("C:/Users/tuj53509/Dropbox/docs/Temple/Advanced Statistics for Urban Applications/Final Project")
#load reqiured libraries
library(GISTools)
library(maptools)
library(spgwr)
library(spdep)
library(lm.beta)
library(pastecs)
#load data
philly <- readShapeSpatial("data/narc_join")
philly_acs <- read.csv("R11739357_SL140.csv")
#join CSV data to philly DF
philly@data <- data.frame(philly@data, philly_acs[match(philly@data[,"GEOID10"],philly_acs[,"Geo_FIPS"]),])
#normalize the count of narcotics incidents
philly$popinthousands <- philly$SE_T001_001 / 1000
philly$narcnorm2 <- philly$Count_ / philly$popinthousands
#unemployment
philly$unempnorm <- philly$SE_T033_006 / philly$SE_T033_001
#veteran
philly$vetnorm <- philly$SE_T131_002  / philly$SE_T131_001
#vacant houses
philly$vacantnorm <- philly$SE_T095_003 / philly$SE_T095_001
#service jobs
philly$servnorm <- philly$SE_T140_003 / philly$SE_T140_001
#remove bad values from data created by 0 population tracts
na.inf <- function (x) {
x[is.infinite(x)] <- 0
return(x)
}
na.zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
philly$narcnorm2 <- na.zero(philly$narcnorm2)
philly$unempnorm <- na.zero(philly$unempnorm)
philly$vetnorm <- na.zero(philly$vetnorm)
philly$vacantnorm <- na.zero(philly$vacantnorm)
philly$servnorm <- na.zero(philly$servnorm)
philly$incomefix <- na.zero(philly$SE_T083_001)
philly$narcnorm2 <- na.inf(philly$narcnorm2)
philly$unempnorm <- na.inf(philly$unempnorm)
philly$vetnorm <- na.inf(philly$vetnorm)
philly$vacantnorm <- na.inf(philly$vacantnorm)
philly$servnorm <- na.inf(philly$servnorm)
vals <- cbind(philly$narcnorm2, philly$vetnorm, philly$SE_T083_001, philly$vacantnorm)
stat.desc(vals)
summary(vals)
pdf(file = "f1.narcoticsarrestschoropleth.pdf")
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(5,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "proportion of adoption")
dev.off()
pdf(file = "f1.narcoticsarrestschoropleth.pdf")
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(5,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "arrests per thousand")
dev.off()
stat.desc(vals)
summary(vals)
summary(lm04.std)
#create our linear model
# lm01 <- lm(philly$Count_ ~ philly$SE_T033_001)
# lm02 <- lm(philly$Count_ ~ philly$SE_T033_001 + philly$SE_T083_001)
# lm03 <- lm(philly$narcnorm2 ~ philly$SE_T033_001 + philly$SE_T083_001 + philly$SE_T131_001 + philly$SE_T095_003 + philly$SE_T140_003)
#lm04 <- lm(philly$narcnorm2 ~  philly$vetnorm + philly$incomefix + philly$vacantnorm )
lm04 <- lm(philly$narcnorm2 ~  philly$vetnorm + philly$incomefix + philly$servnorm )
summary(lm04)
#add standardized betas
lm04.std <- lm.beta(lm04)
summary(lm04.std)
#dianostic plots for lm04
pdf(file = "f2.lm04diag.pdf")
par(mar=c(0,0,2,0),mfrow=c(2,2))
plot(lm04)
par(mfrow=c(1,1))
dev.off()
#lm04 residuals
lm04residshades = auto.shading(lm04$residuals, cols=brewer.pal(5,"Greens"))
pdf(file = "f3.lm04residchoropleth.pdf")
choropleth(philly, lm04$residuals, shading = lm04residshades)
title("Figure 3: Residuals from linear model lm04")
choro.legend(2729559,251723.8, lm04residshades, title = "residuals")
dev.off()
#create neighbor list and plot
philly_neighbors <- poly2nb(philly)
pdf(file = "f4.neighbormap.pdf")
plot(philly, main = "Figure 4: Neighbor plot of Philadelphia Census Tracts")
plot(philly_neighbors, coordinates(philly), add=T, col='blue')
dev.off()
#create lagged means
philly_neigh_lw <- nb2listw(philly_neighbors)
narclag <- lag.listw(philly_neigh_lw, philly$narcnorm2)
#create lagged means plot
laggedmeanshades = auto.shading(narclag, cols=brewer.pal(5,"Greens"))
pdf(file = "f5.laggedmeanchoropleth.pdf")
choropleth(philly, narclag, shading =laggedmeanshades)
title("Figure 5: Lagged Means plot of Philadelphia Narcotics Arrests")
choro.legend(2729559,251723.8, laggedmeanshades, title = "Lagged Means")
dev.off()
#Moran's I
moran.range <- function(lw) {
wmat <- listw2mat(lw)
return(range(eigen((wmat + t(wmat))/2)$values))
}
moran.range(philly_neigh_lw)
#approximate test statistic using normal distribution
moran.test(philly$narcnorm2, philly_neigh_lw)
#calculate the test statistic using 10,000 random trials
moran.mc(philly$narcnorm2, philly_neigh_lw, 10000)
#Moran's Plot
pdf(file = "f6.moransplotnorm.pdf")
moran.plot(philly$narcnorm2, philly_neigh_lw)
title("Figure 6: Moran's Plot: Normalized Arrests")
dev.off()
pdf(file = "f7.moransplotraw.pdf")
moran.plot(philly$Count_, philly_neigh_lw)
title("Figure 7: Moran's Plot: Raw Arrest Count")
dev.off()
#GWR
philly.bw <- gwr.sel(philly$narcnorm2 ~ philly$vetnorm + philly$incomefix + philly$servnorm, data = philly, gweight = gwr.Gauss)
philly.gwr <- gwr(philly$narcnorm2 ~ philly$vetnorm + philly$incomefix + philly$servnorm, data = philly, bandwidth = philly.bw, gweight = gwr.Gauss, hatmatrix = T)
gwr.df <- slot(philly.gwr$SDF, "data")
summary(philly.gwr)
names(philly.gwr)
names(philly.gwr$SDF)
print(philly.gwr)
anova(philly.gwr)
#calculate the t-score and p value
gwr.df$vet_tval <- gwr.df$philly.vetnorm / gwr.df$philly.vetnorm_se
gwr.df$vet_pval <-pt(gwr.df$vet_tval, 380, lower.tail = FALSE)
gwr.df$income_tval <- gwr.df$philly.incomefix / gwr.df$philly.incomefix_se
gwr.df$income_pval <- pt(gwr.df$income_tval, 380, lower.tail = FALSE)
gwr.df$serv_tval <- gwr.df$philly.servnorm / gwr.df$philly.servnorm_se
gwr.df$serv_pval <- pt(gwr.df$serv_tval, 380, lower.tail = FALSE)
pdf(file = "f8.vetparamchoropleth.pdf")
vetparamshades = auto.shading(gwr.df$philly.vetnorm, cols=brewer.pal(5,"Greens"))
choropleth(philly, gwr.df$philly.vetnorm, shading=vetparamshades)
title("Figure 8: GWR Parameter Estimate for Veteran Status")
choro.legend(2729559,251723.8, vetparamshades, title = "vet status")
dev.off()
pdf(file = "f9.vetpvalchoro.pdf")
vetpvalshades <- shading(c(0.005, 0.01, 0.05), cols = rev(brewer.pal(4, "Greens")))
choropleth(philly, gwr.df$vet_pval, shading = vetpvalshades)
title("Figure 9: P-Value for Veteran Status")
choro.legend(2729559,251723.8, vetpvalshades, title = "p-value")
dev.off()
pdf(file = "f10.incomeparamchoropleth.pdf")
par(mar=c(1,1,2,1))
incomeparamshades = auto.shading(gwr.df$philly.incomefix, cols=brewer.pal(5,"Greens"))
choropleth(philly, gwr.df$philly.incomefix, shading=incomeparamshades)
title("Figure 10: GWR Parameter Estimate for Per Capita Income")
choro.legend(2711398,241846.7, incomeparamshades, title = "per cap income")
dev.off()
pdf(file = "f11.incomepvalchoro.pdf")
incomepvalshades <- shading(c(0.005, 0.01, 0.05), cols = rev(brewer.pal(4, "Greens")))
choropleth(philly, gwr.df$income_pval, shading = incomepvalshades)
title("Figure 11: P-Value for Per Capita Income")
choro.legend(2729559,251723.8, incomepvalshades, title = "p-value")
dev.off()
pdf(file = "f12.servparamchoropleth.pdf")
servparamshades = auto.shading(gwr.df$philly.servnorm, cols=brewer.pal(5,"Greens"))
choropleth(philly, gwr.df$philly.servnorm, shading=servparamshades)
title("Figure 12: GWR Parameter Estimate for Service Jobs")
choro.legend(2729559,251723.8, servparamshades, title = "service jobs")
dev.off()
pdf(file = "f13.servpvalchoro.pdf")
servpvalshades <- shading(c(0.005, 0.01, 0.05), cols = rev(brewer.pal(4, "Greens")))
choropleth(philly, gwr.df$serv_pval, shading=servpvalshades)
title("Figure 13: P-Value for Service Jobs")
choro.legend(2729559,251723.8, servpvalshades, title = "p-value")
dev.off()
#R^2
pdf(file = "f14.localr2.pdf")
localr2shades = auto.shading(gwr.df$localR2, cols=brewer.pal(5,"Greens"))
choropleth(philly, gwr.df$localR2, shading=localr2shades)
title("Figure 14: GWR Local R² values")
choro.legend(2729559,251723.8, localr2shades, title = "Local R²")
dev.off()
#Spatial Autoregressive Models
lm04.lag <- lagsarlm(philly$narcnorm2 ~ philly$vetnorm + philly$incomefix + philly$servnorm, data = philly, philly_neigh_lw)
summary(lm04.lag)
anova(lm04.lag, lm04)
save.image("C:/Users/tuj53509/Dropbox/docs/Temple/Advanced Statistics for Urban Applications/Final Project/.RData-env.RData")
summary(lm04)
#add standardized betas
lm04.std <- lm.beta(lm04)
summary(lm04.std)
#dianostic plots for lm04
pdf(file = "f2.lm04diag.pdf")
par(mar=c(1,1,2,1),mfrow=c(2,2))
plot(lm04)
par(mfrow=c(1,1))
dev.off()
#dianostic plots for lm04
pdf(file = "f2.lm04diag.pdf")
par(mar=c(2,2,2,2),mfrow=c(2,2))
plot(lm04)
par(mfrow=c(1,1))
dev.off()
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(5,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "arrests per thousand")
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(7,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "arrests per thousand")
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(6,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "arrests per thousand")
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(9,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "arrests per thousand")
narcnorm.shades <- auto.shading(philly$narcnorm2, cols=brewer.pal(5,"Greens"))
choropleth(philly, philly$narcnorm2, shading = narcnorm.shades)
title("Figure 1: Narcotics Arrests, 2012-2016")
choro.legend(2725857,238144, narcnorm.shades, title = "arrests per thousand")
philly$narcnorm2
philly$narcnorm2[254]
philly$narcnorm2[253]
philly$incomefix
philly$incomefix[254]
philly$incomefix[253]
philly$vetnorm
philly$vetnorm[253,254]
philly$vetnorm[253]
philly$vetnorm[253..254]
philly$vetnorm[254]
philly$servnorm
philly$servnorm[253]
philly$servnorm[254]
philly$narcnorm2
philly$narcnorm2[253]
philly$narcnorm2[254]
philly$narcnorm2[255]
moran.range(philly_neigh_lw)
#approximate test statistic using normal distribution
moran.test(philly$narcnorm2, philly_neigh_lw)
#calculate the test statistic using 10,000 random trials
moran.mc(philly$narcnorm2, philly_neigh_lw, 10000)
summary(lm04.lag)
anova(lm04.lag, lm04)
summary(lm04.lag)
summary(lm04.lag)
#Spatial Autoregressive Models
lm04.lag <- lagsarlm(philly$narcnorm2 ~ philly$vetnorm + philly$incomefix + philly$servnorm, data = philly, philly_neigh_lw)
summary(lm04.lag)
plot(lm04.lag)
plot(lm04.lag)
plot(lm04)
stat.desc(vals)
vals <- cbind(philly$narcnorm2, philly$vetnorm, philly$incomefix, philly$servnorm)
stat.desc(vals)
summary(vals)
stat.desc(vals)
summary(vals)
stat.desc(vals)
