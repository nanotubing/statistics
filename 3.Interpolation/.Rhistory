plot(blocks)
plot(breach, add= TRUE)
plot(breach, add= TRUE, pch = '@')
?points
plot(blocks)
plot(breach, add= TRUE, pch = 25)
plot(blocks)
plot(breach, add= TRUE, pch = 25, col="red")
plot(breach, add= TRUE, pch = 18, col="red")
plot(blocks)
plot(breach, add= TRUE, pch = 18, col="red")
brewer.pal(5, "Reds")
add.alpha(brewer.pal(5, "Reds"), .50)
par(mar = c(0,0,0,0))
add.alpha(brewer.pal(5, "Reds"), .50)
plot(blocks, lwd = 0.7, border = "grey40")
plot(breach, add=TRUE, pch=1, col="#DE2D2680")
data(quakes)
head(quakes)
coords.tmp <- cbind(quakes$long, quakes$lat)
quakes.spdf <- SpatialPointsDataFrame(coords.tmp, data = data.frame(quakes.spdf))
quakes.spdf <- SpatialPointsDataFrame(coords.tmp, data = data.frame(quakes))
par(mar = c(0,0,0,0))
par(mfrow = c(1,2))
plot(quakes.spdf)
plot(quakes.spdf, pch = 1, col = "#FB6A4A80")
par(mfwow = c(1,1))
par(mfrow = c(1,1))
tmp <- georgia.polys[c(1,3,151,113)]
t1 <- polygon(tmp[1]); t1 <- Polygons(list(t1), "1")
t2 <- polygon(tmp[2]); t2 <- Polygons(list(t2), "2")
t3 <- polygon(tmp[3]); t3 <- Polygons(list(t3), "3")
t4 <- polygon(tmp[4]); t4 <- Polygons(list(t4), "4")
t1 <- polygon(tmp[1]); t1 <- Polygons(list(t1), "1")
t1 <- polygon(tmp[1]); t1 <- Polygons(list(t1), "1")
tmp <- georgia.polys[c(1,3,151,113)]
# convert to Polygon and the Polygons object
t1 <- Polygon(tmp[1]); t1 <- Polygons(list(t1), "1")
#these four commands don't work. thanks book
t1 <- Polygon(tmp[1]); t1 <- Polygons(list(t1), "1")
t2 <- Polygon(tmp[2]); t2 <- Polygons(list(t2), "2")
t3 <- Polygon(tmp[3]); t3 <- Polygons(list(t3), "3")
t4 <- Polygon(tmp[4]); t4 <- Polygons(list(t4), "4")
tmp.Sp <- SpatialPolygons(list(t1, t2, t3, t4), 1:4)
plot(tmp.Sp, col = 2:5)
names <- c("Appling", "Bacon", "Wayne", "Pierce")
tmp.spdf <- SpatialPolygonsDataFrame(tmp.sp, data = data.frame(names))
tmp.spdf <- SpatialPolygonsDataFrame(tmp.Sp, data = data.frame(names))
data.frame(tmp.spdf)
plot(tmp.spdf, col = 2:5)
par(mfrow = c(2,2))
par(mar = c(0,0,0,0))
choropleth(quakes.spdf, quakes$mag)
shades = auto.shading(quakes$mag,n = 6,cols =brewer.pal(6, "Greens")
shades, pch = 1)
shades = auto.shading(quakes$mag,n = 6,cols =brewer.pal(6, "Greens")
shades = auto.shading(quakes$mag,n = 6,cols = brewer.pal(6, "Greens")
shades = auto.shading(quakes$mag, n = 6,cols = brewer.pal(6, "Greens")
shades = auto.shading(quakes$mag, n = 6, cols = brewer.pal(6, "Greens")
shades = auto.shading(quakes$mag, n = 6, cols = brewer.pal(6, "Greens"))
choropleth(quakes.spdf, quakes$mag, shades, pch = 1)
shades$cols <- add.alpha(shades$cols, 0.5)
choropleth(quakes.spdf, quakes$mag, shading = shades, pch = 20)
tmp <- quakes$mag
tmp <- tmp - min(tmp)
tmp <- tmp / max(tmp)
plot(quakes.spdf, cex = tmp * 3, pch = 1, col = "#FB6A4A80")
#this section copied from book text
# Set the plot parameters
par(mfrow=c(1,2))
par(mar = c(0,0,0,0))
## 1. Apply a threshold to categorise the data
tmp2 <- cut(quakes$mag, fivenum(quakes$mag), include.lowest = T)
class <- match(tmp2,levels(tmp2))
# specify 4 plot characters to use
pch.var <- c(0,1,2,5)
# Plot the classes
plot(quakes.spdf, pch = pch.var[class], cex = 0.7,
col = "#252525B3")
## 2. Thresholds for classes can be specified
# logical operations help to define 3 classes
# note the terms such as '+ 0' convert TRUE / FALSE to numbers
index.1 <- (quakes$mag >= 4 & quakes$mag < 5) + 0
index.2 <- (quakes$mag >=5 & quakes$mag < 5.5) * 2
index.3 <- (quakes$mag >=5.5) * 3
class <- index.1 + index.2 + index.3
# specify 3 plot colours to use
col.var <- (brewer.pal(3, "Blues"))
plot(quakes.spdf, col = col.var[class], cex = 1.4, pch = 20)
# reset par(mfrow)
par(mfrow=c(1,1))
library(RgoogleMaps)
Lat <- as.vector(quakes$lat)
Long <- as.vector(quakes$long)
MyMap <- MapBackground(lat=Lat, lon=Long, zoom = 10)
# note the use of the tmp variable defined earlier to set the cex value
PlotOnStaticMap(MyMap,Lat,Long,cex=tmp+0.3,pch=1,
col= '#FB6A4A80')
MyMap <- MapBackground(lat=Lat, lon=Long, zoom = 10, maptype = "satellite")
PlotOnStaticMap(MyMap,Lat,Long,cex=tmp+0.3,pch=1,
col='#FB6A4A80')
# 1. create a clip area
xmin <- bbox(roads)[1,1]
ymin <- bbox(roads)[2,1]
xmax <- xmin + diff(bbox(roads)[1,]) / 2
ymax <- ymin + diff(bbox(roads)[2,]) / 2
?bbox
xx = as.vector(c(xmin, xmin, xmax, xmax, xmin))
yy = as.vector(c(ymin, ymax, ymax, ymin, ymin))
# 2. create a spatial polygon from this
crds <- cbind(xx,yy)
Pl <- Polygon(crds)
?cbind
ID <- "clip"
Pls <- Polygons(list(Pl), ID=ID)
SPls <- SpatialPolygons(list(Pls))
df <- data.frame(value=1, row.names=ID)
clip.bb <- SpatialPolygonsDataFrame(SPls, df)
# 3. clip out the roads and the data frame
roads.tmp <- gIntersection(clip.bb, roads, byid = T)
?gsub
?gIntersection
plot(roads)
tmp <- as.numeric(gsub("clip", "", names(roads.tmp)))
tmp <- data.frame(roads)[tmp,]
# 4. finally create the SLDF object
roads.tmp <- SpatialLinesDataFrame(roads.tmp,
data = tmp, match.ID = F)
par(mfrow=c(1,3)) # set plot order
par(mar = c(0,0,0,0)) # set margins
# 1. simple map
plot(roads.tmp)
View(roads.tmp)
roads.tmp@data[["AV_LEGEND"]]
# 2. mapping an attribute variable
road.class <- unique(roads.tmp$AV_LEGEND)
road.class
?rev
# specify a shading scheme from the road types
shades <- rev(brewer.pal(length(road.class), "Spectral"))
tmp <- roads.tmp$AV_LEGEND
index <- match(tmp, as.vector(road.class))
index
plot(roads.tmp, col = shades[index], lwd = 3)
# 3. using an attribute to specify the line width
plot(roads.tmp, lwd = roads.tmp$LENGTH_MI * 10)
# reset par(mfrow)
par(mfrow=c(1,1))
data(meuse.grid)
class(meuse.grid)
summary(meuse.grid)
plot(meuse.grid$x, meuse.grid$y, asp = 1)
meuse.grid = SpatialPixelsDataFrame(points =
meuse.grid[c("x", "y")], data = meuse.grid)
par(mfrow=c(1,2)) # set plot order
par(mar = c(0.25, 0.25, 0.25, 0.25)) # set margins
# map the dist attribute using the image function
image(meuse.grid, "dist", col = rainbow(7))
image(meuse.grid, "dist", col = heat.colors(7))
# using spplot from the sp package
par(mar = c(0.25, 0.25, 0.25, 0.25)) # set margins
p1 <- spplot(meuse.grid, "dist", col.regions=terrain.colors(20))
# position in c(xmin, ymin, xmax, ymax)
print(p1, position = c(0,0,0.5,0.5), more = T)
View(meuse.grid)
View(meuse.grid)
p2 <- spplot(meuse.grid, c("part.a", "part.b", "soil", "ffreq"),
col.regions=topo.colors(20))
print(p2, position = c(0.5,0,1,0.5), more = T)
data(newhaven)
hist(blocks$P_VACANT)
summary(blocks$P_VACANT)
fivenum(blocks$P_VACANT)
?fivenum
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
par(mfrow=c(1,1))
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
par(mar = c(5,2,2,5))
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
par(mar = c(5,3,1,5))
hist(blocks$P_VACANT, breaks = 20, col = "cyan", border = "salmon", main = "The distribution of vacant property percentages", xlab = "percentage vacant", xlim = c(0,40))
index <- blocks$P_VACANT > 10
high.vac <- blocks[index,]
low.vac <- blocks[!index,]
cols = rev(brewer.pal(3, "Blues"))
par(mfrow = c(1,2))
par(mar = c(2.5,2,3,1))
# attach the data frame
attach(data.frame(high.vac))
# create a boxplot of 3 variables
boxplot(P_OWNEROCC,P_WHITE,P_BLACK,
names=c("OwnerOcc", "White", "Black"),
col=cols, cex.axis = 0.7, main = "High Vacancy")
# detach the data frame
detach(data.frame(high.vac))
# attach the data frame
attach(data.frame(high.vac))
# detach the data frame
detach(data.frame(high.vac))
# do the same for the second boxplot & variables
attach(data.frame(low.vac))
boxplot(P_OWNEROCC,P_WHITE,P_BLACK,
names=c("OwnerOcc","White", "Black"),
col=cols, cex.axis = 0.7, main = "Low Vacancy")
detach(data.frame(low.vac))
# reset par(mfrow)
par(mfrow=c(1,1))
# reset the plot margins
par(mar=c(5,4,4,2))
plot(blocks$P_VACANT/100, blocks$P_WHITE/100)
plot(blocks$P_VACANT/100, blocks$P_BLACK/100)
p.vac <- blocks$P_VACANT/100
p.w <- blocks$P_WHITE/100
p.b <- blocks$P_BLACK/100
mod.1 <- lm(p.vac ~ p.w)
mod.2 <- lm(p.vac ~ p.b)
summary(mod.1)
summary(mod.2)
summary(lm(p.vac ~ p.w + p.b))
# define a factor for the jitter function
fac = 0.05
# define a colour palette
cols = (brewer.pal(6, "Spectral"))
?jitter
# plot the points with small random term added
# this is to help show densities
# 1st properties vacant against p.w
plot(jitter(p.vac, fac), jitter(p.w, fac),
xlab= "Proportion Vacant",
ylab = "Proprtion White / Black",
col = cols[1], xlim = c(0, 0.8))
# then properties vacant against p.b
points(jitter(p.vac, fac), jitter(p.b, fac), col = cols[6])
?abline
# fit some trend lines from the 2 regression model coefficients
abline(a = coef(mod.1)[1], b= coef(mod.1)[2],
lty = 1, col = cols[1]); #white
abline(a = coef(mod.2)[1], b= coef(mod.2)[2],
lty = 1, col = cols[6]); #black
# add some legend items
legend(0.71, 0.19, legend = "Black", bty = "n", cex = 0.8)
legend(0.71, 0.095, legend = "White", bty = "n", cex = 0.8)
?legend
# populations of each group in each census block
pops <- data.frame(blocks[,14:18]) * data.frame(blocks)[,11]
View(blocks)
pops <- as.matrix(pops/100)
View(pops)
colnames(pops) <- c("White", "Black", "Ameri", "Asian", "Other")
# a true / false for vacant properties
vac.10 <- (blocks$P_VACANT > 10) + 0
# the crosstabulations
mat.tab <- xtabs(pops ~vac.10)
# mosaic plot
ttext = sprintf("Mosaic Plot of Vacant Properties with ethnicty")
mosaicplot(t(mat.tab),xlab='',
ylab= 'Vacant Properties > 10 percent',
main=ttext,shade=TRUE,las=3,cex=0.8)
q
pops
head(pops)
head(vac.10)
head(mat.tab)
mat.tab
?mosaicplot
library(sos);findFn("choropleth")
## ----carsonvoro,cache=TRUE-----------------------------------------------
#
# Original code from Carson Farmer
# http://www.carsonfarmer.com/2009/09/voronoi-polygons-with-r/
# Subject to minor stylistic modifications
#
require(deldir)
require(sp)
voronoipolygons = function(layer) {
crds <- layer@coords
z <- deldir(crds[,1], crds[,2])
w <- tile.list(z)
polys <- vector(mode='list', length=length(w))
for (i in seq(along=polys)) {
pcrds <- cbind(w[[i]]$x, w[[i]]$y)
pcrds <- rbind(pcrds, pcrds[1,])
polys[[i]] <- Polygons(list(Polygon(pcrds)),
ID=as.character(i))
}
SP <- SpatialPolygons(polys)
voronoi <- SpatialPolygonsDataFrame(SP,
data=data.frame(x=crds[,1],
y=crds[,2],
layer@data,
row.names=sapply(slot(SP, 'polygons'),
function(x) slot(x, 'ID'))))
return(voronoi)
}
voronoipolygons()
## ----transects,fig.cap='Fulmar Sighting Transects (LHS=Points; RHS=Voronoi Diagram)',results='hide',cache=TRUE----
library(gstat)
library(maptools)
data(fulmar)
head(fulmar)
fulmar.spdf <- SpatialPointsDataFrame(cbind(fulmar$x,fulmar$y),
fulmar)
head(fulmar.spdf)
head(fulmar.spdf$data)
head(fulmar.spdf$coords)
fulmar.spdf <- fulmar.spdf[fulmar.spdf$year==1999,]
fulmar.voro <- voronoipolygons(fulmar.spdf)
par(mfrow=c(1,2),mar=c(0.1,0.1,0.1,0.1))
plot(fulmar.spdf,pch=16)
plot(fulmar.voro)
## ----nni,fig.cap='Nearest Neighbour Estimate of Fulmar Density',results='hide',cache=TRUE----
library(gstat)
library(GISTools)
sh <- shading(breaks=c(5,15,25,35),
cols=brewer.pal(5,'Purples'))
par(mar=c(0.1,0.1,0.1,0.1))
choropleth(fulmar.voro,fulmar.voro$fulmar,shading=sh,border=NA)
plot(fulmar.voro,border='lightgray',add=TRUE,lwd=0.5)
choro.legend(px='topright',sh=sh)
## ----setupIDW,results='hide',cache=FALSE---------------------------------
library(maptools) # Required package
library(GISTools) # Required package
library(gstat) # Set up the gstat package
# Define a sample grid then use it as a set of points
# to estimate fulmar density via IDW, with alpha=1
s.grid <- spsample(fulmar.voro,type='regular',n=6000)
idw.est <- gstat::idw(fulmar~1,fulmar.spdf,
newdata=s.grid,idp=1.0)
summary(idw.est)
head(idw.est)
## ----reshapeIDW,cache=FALSE----------------------------------------------
# Extract the distinct x and y coordinates of the grid
# Extract the predicted values and form into a matrix
# of gridded values
ux <- unique(coordinates(idw.est)[,1])
uy <- unique(coordinates(idw.est)[,2])
predmat <- matrix(idw.est$var1.pred,length(ux),length(uy))
head(idw.est$var1.pred)
## ----setupIDW2,results='hide',cache=FALSE--------------------------------
idw.est2 <- gstat::idw(fulmar~1,fulmar.spdf,
newdata=s.grid,idp=2.0)
predmat2 <- matrix(idw.est2$var1.pred,length(ux),length(uy))
par(mar=c(0.1,0.1,0.1,0.1),mfrow=c(1,2))
plot(fulmar.voro,border=NA,col=NA)
.filled.contour(ux,uy,predmat,col=brewer.pal(5,'Purples'),
levels=c(0,2,4,6,8,30))
.filled.contour(ux,uy,predmat,col=brewer.pal(5,'Purples'),
levels=c(0,2,4,6,8,30))
# Draw the legend
sh <- shading(breaks=c(2,4,6,8),
cols=brewer.pal(5,'Purples'))
choro.legend(px='topright',sh=sh,bg='white')
plot(fulmar.voro,border=NA,col=NA)
.filled.contour(ux,uy,predmat2,col=brewer.pal(5,'Purples'),
levels=c(0,2,4,6,8,30))
choro.legend(px='topright',sh=sh,bg='white')
## ----idw3dflaws,fig.cap="3D Plots of IDW (LHS:$\\alpha=1$; RHS:$\\alpha=2$)",cache=FALSE----
par(mfrow=c(1,2),mar=c(0,0,2,0))
persp(predmat,box=FALSE)
persp(predmat2,box=FALSE)
## ----krige,fig.cap='Kriging semivariogram',message=FALSE,results='hide',cache=FALSE----
evgm <- variogram(fulmar~1,fulmar.spdf,
boundaries=seq(0,250000,l=51))
fvgm <- fit.variogram(evgm,vgm(3,"Mat",100000,1))
head(evgm)
head(fvgm)
names(evgm)
names(fvgm)
plot(evgm,model=fvgm)
## ----krig2,fig.cap='Kriging estimates of fulmar density (RHS),  and associated variance (LHS)',message=FALSE,results='hide',cache=FALSE----
krig.est <- krige(fulmar~1,fulmar.spdf,newdata=s.grid,model=fvgm)
head(krig.est)
names(krig.est)
predmat3 <- matrix(krig.est$var1.pred,length(ux),length(uy))
par(mar=c(0.1,0.1,0.1,0.1),mfrow=c(1,2))
plot(fulmar.voro,border=NA,col=NA)
?pmax
.filled.contour(ux,uy,pmax(predmat3,0),col=brewer.pal(5,'Purples'),
levels=c(0,8,16,24,32,40))
.filled.contour(ux,uy,pmax(predmat3,0),col=brewer.pal(5,'Purples'),
levels=c(0,8,16,24,32,40))
sh <- shading(breaks=c(8,16,24,32),
cols=brewer.pal(5,'Purples'))
choro.legend(px='topright',sh=sh,bg='white')
errmat3 <- matrix(krig.est$var1.var,length(ux),length(uy))
plot(fulmar.voro,border=NA,col=NA)
.filled.contour(ux,uy,errmat3,col=rev(brewer.pal(5,'Purples')),
levels=c(0,3,6,9,12,15))
sh <- shading(breaks=c(3,6,9,12),
cols=rev(brewer.pal(5,'Purples')))
choro.legend(px='topright',sh=sh,bg='white')
## ----onk,fig.cap="3D Plot Kriging-based interpolation.",cache=FALSE------
persp(predmat3,box=FALSE)
setwd("C:/Users/tuj53509/Dropbox/docs/Temple/Advanced Statistics for Urban Applications/Assignment3")
library(sp)
library(rgdal)
library(maptools)
library(RColorBrewer)
library(GISTools)
require(SpatialEpi)
require(deldir)
library(gstat)
library(classInt)
#load data
midatl_states <- readShapePoly("MidAtlStates_WGS/MidAtlStates_WGS.shp", proj4string = CRS("+init=EPSG:4326"))
names(midatl_states)
plot(midatl_states)
greenhouse <- read.csv("2015EPA_FLIGHT_GreenhouseGas.csv", header = TRUE)
greenhouse <- as.data.frame(greenhouse)
head(greenhouse)
ghg <- greenhouse[,c("x","y")]
head(ghg)
ghg.spdf <- SpatialPointsDataFrame(greenhouse[,c("x","y")], data = greenhouse, proj4string = CRS("+init=EPSG:4326"))
head(ghg.spdf)
par(mfrow=c(1,1))
par(mar=c(0,0,0,0))
plot(ghg.spdf)
ghg.utm <- spTransform(ghg.spdf, CRS("+init=EPSG:32618"))
sts.utm <- spTransform(midatl_states, CRS("+init=EPSG:32618"))
pdf(file="f1.ghgandstates.pdf")
par(mar=c(2,2,2,2))
plot(ghg.utm, main="Figure 1: Midatlantic Carbon Equivalent of Emissions")
plot(sts.utm, add = TRUE)
dev.off()
pdf(file="f2.ghghist.pdf")
par(mfrow=c(1,1), mar=c(2,2,2,2))
hist(ghg.utm$CarbonMetTon, breaks = 10, main="Figure 2: Distribution of Carbon Equivalent of Emissions, 2015")
dev.off()
#Step 3: Nearest Neighbor Estimation
#set up functions
voronoipolygons = function(layer) {
crds <- layer@coords
z <- deldir(crds[,1], crds[,2])
w <- tile.list(z)
polys <- vector(mode='list', length=length(w))
for (i in seq(along=polys)) {
pcrds <- cbind(w[[i]]$x, w[[i]]$y)
pcrds <- rbind(pcrds, pcrds[1,])
polys[[i]] <- Polygons(list(Polygon(pcrds)),
ID=as.character(i))
}
SP <- SpatialPolygons(polys)
voronoi <- SpatialPolygonsDataFrame(SP,
data=data.frame(dummy=sapply(slot(SP, 'polygons'),
function(x) slot(x, 'ID'))))
return(voronoi)
}
ghg.voro <- voronoipolygons(ghg.utm)
pdf(file="f3.nearestneighbor.pdf")
par(mfrow=c(1,2),mar=c(1,1,4,1))
plot(ghg.spdf)
title("Figure 3: Nearest Neighbor Diagnostic")
plot(ghg.voro)
dev.off()
par(mfrow=c(1,1), mar=c(2,0,2,0))
pdf(file="f4.nearestneighborchoro.pdf")
nneigh.shades <- auto.shading(ghg.utm$CarbonMetTon, cols=brewer.pal(5,"Blues"))
choropleth(ghg.voro, ghg.utm$CarbonMetTon, shading=nneigh.shades, main="Figure 4: Carbon Equivalent of Emissions, 2015")
choro.legend(px='bottomright',bg="white",sh=nneigh.shades, cex=.75, title="Metric Tons of Greenhouse Gases")
dev.off()
#create two KDEs
par(mfrow=c(1,1))
#KDE1 - use the default bandwidth
ghg1.dens <- kde.points(ghg.utm, lims = sts.utm)
masker1 <- poly.outer(ghg1.dens, sts.utm, extend = 100)
pdf(file="f5.kde01.pdf")
level.plot(ghg1.dens)
add.masking(masker1)
plot(sts.utm, add = TRUE)
title("Figure 5: Density Estimate of Carbon Emissions")
dev.off()
#KDE2 - use manually set a bandwidth
ghg2.dens <- kde.points(ghg.utm, h=53000, lims = sts.utm)
masker2 <- poly.outer(ghg2.dens, sts.utm, extend = 100)
pdf(file="f6.kde02.pdf")
level.plot(ghg2.dens)
add.masking(masker2)
plot(sts.utm, add = TRUE)
title("Figure 6: Density Estimate of Carbon Emissions, increased bandwidth", cex = .75)
dev.off()
#Step 4: Inverse Distance Weighting
proj4string(ghg.voro) <- CRS("+init=EPSG:32618")
ghg.grid1 <- spsample(ghg.voro,type='regular',n=6000)
#model 1 with alpha = 1.0
ghg.idw.est1 <- gstat::idw(CarbonMetTon~1, ghg.utm,newdata=ghg.grid1,idp=1.0)
#Model 2 with alpha = 2.0
ghg.idw.est2 <- gstat::idw(CarbonMetTon~1, ghg.utm,newdata=ghg.grid1,idp=2.0)
ux <- unique(coordinates(ghg.idw.est1)[,1])
uy <- unique(coordinates(ghg.idw.est1)[,2])
#prediction matrix for idw estimate 1
predmat <- matrix(ghg.idw.est1$var1.pred,length(ux),length(uy))
#prediction matrix for idw estimate 2
predmat2 <- matrix(ghg.idw.est2$var1.pred,length(ux),length(uy))
#calculate breaks
#classbreaks <- classIntervals(ghg.idw.est1$var1.pred,n=5,style="jenks")
#plot idw estimates
pdf(file="f7.idwests.pdf")
par(mar=c(1,1,2,0.1),mfrow=c(1,2))
plot(ghg.voro,border=NA,col=NA)
.filled.contour(ux,uy,predmat,col=brewer.pal(6,'Blues'),
levels=c(0,125672,308036,352758,434444,682066,1385206))
title("Figure 7: IDW estimate, alpha=1", cex=0.75)
#levels=c(125672,308036,352758,434444,682066,1385206))
#plot IDW estimate 2
plot(ghg.voro,border=NA,col=NA)
.filled.contour(ux,uy,predmat2,col=brewer.pal(6,'Blues'),
levels=c(0,125672,308036,352758,434444,682066,1385206))
title("alpha=2", cex=0.75)
dev.off()
#Step 5: Kriging
proj4string(ghg.voro
)
